#include "msp.h"
#include "delay.h"
#include "Keypad.h"
#include "LCD.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define CLK_FREQ 24
void swap(char *str1, char *str2){
    char str_temp[strlen(str1)];
    memcpy(str_temp, str1, strlen(str1)); //str_temp = str1
    memcpy(str1, str2, strlen(str2)); //str_temp = str1
    memcpy(str2, str_temp, strlen(str_temp));
}

/* A utility function to reverse a string  */
void reverse(char str[], int length)
{
    int start = 0;
    int end = length -1;
    while (start < end)
    {
        swap((str+start), (str+end));
        start++;
        end--;
    }
}

// Implementation of itoa()
char* itoa(int num, char* str, int base)
{
    int i = 0;
    int isNegative = 0;

    /* Handle 0 explicitely, otherwise empty string is printed for 0 */
    if (num == 0)
    {
        str[i++] = '0';
        str[i] = '\0';
        return str;
    }

    // In standard itoa(), negative numbers are handled only with
    // base 10. Otherwise numbers are considered unsigned.
    if (num < 0 && base == 10)
    {
        isNegative = 1;
        num = -num;
    }

    // Process individual digits
    while (num != 0)
    {
        int rem = num % base;
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
        num = num/base;
    }

    // If number is negative, append '-'
    if (isNegative)
        str[i++] = '-';

    str[i] = '\0'; // Append string terminator

    // Reverse the string
    reverse(str, i);

    return str;
}




int over_fl = 0;

// 6 and 5 is used for keypad
// 2 and 4 are used for lcd 
// use 1 and 3 for comparison 


//steP4: user A press a button, trigger that Port Interupt,
//interupt would start timer_a0 timer.


int toggle = 0;
int timer_int;

void fn(){
    if toggle == 0:
            startTimer(&timer_int);
            togger = 1;

    else:
         stopTimer(&timer_int);
         toggle =0;

}
void PORT4_IRQHandler(void){
    /*start timer_a0 here*/
    TIMER_A0 -> CTL |= TIMER_A_CTL_IE;
    TIMER_A0 -> CTL = TIMER_A_CTL_TASSEL_2 | TIMER_A_CTL_MC_2; // tassel - select clock src, mc - select continuous mode
    // do a TA CLR here 
    TIMER_A0 -> CTL |= TIMER_A_CTL_CLR;
    
    
}

//step 2: while waiting until USER b press button, maybe timer_a0 overflow
//this handler will trigger ;

void TA0_N_IRQHandler(void){
    TIMER_A0 -> CTL&= ~TIMER_A_CTL_IFG;
    over_fl++;
}

//step 3:  USER B Press button, print out time and clear everything
//for next run


void PORT3_IRQHandler(void){

    /*stop timer here */
    int final_cycle_count =0;
    int final_time = 0;
    char buffer[30];
    //(*((volatile uint16_t *)(0x40000010))))
    final_cycle_count= TIMER_A0->R + (over_fl * 65535);
    // clock = 24mhz -> 1s = 24 000 000 cycle
    final_time = final_cycle_count/ (CLK_FREQ*10^6);
    


    Clear_LCD();
    Write_string_LCD(itoa(final_time,buffer,10));

    delay_us(2000000);
    
    //reset the IFG flag for the next time the user play ( buttons pressed);
    over_fl = 0;
    P4 -> IFG &= ~BIT0; // similar to TIMER_A0 -> CTL&= ~TIMER_A_CTL_IFG;
    P3 -> IFG &= ~BIT0;
    //turn off timer A0 here;
}





void set_everything(){
    
  //keypad init here 
  //
  //lcd init here 
    
	// step 0 - set up the GPIO INput
	P4->OUT&= ~BIT0;
	P4->DIR |= BIT0;
	P4->SEL0 &= ~BIT0;
	P4->SEL1 &= ~BIT0;
	//P4->REN = // XXX

	P4-> IE |= BIT0;
	P4-> IFG &= ~BIT0;

	// step 0 - set up the GPIO
	P3->OUT&= ~BIT0;
	P3->DIR |= BIT0; // setup p3 dir to be input
	P3->SEL0 &= ~BIT0;
	P3->SEL1 &= ~BIT0;
    P3-> IE |= BIT0;
    P3-> IFG &= ~BIT0;    
    
    //now everytime you change P3->OUT manually, it actually sets P3 ->IFG high
    // 12.2.7 TRM page 680 said so 
    // do this in main i guess
    //if button 1 is pressed P4-> bit 0 high which trigger interupt
    //if button 3 is pressed p3-> bit 0 out high 
    

	// Step 4 = enable NVIC

    NVIC->ISER[0] = (1 << (TA0_N_IRQn & 0x1F)); // for TAIFG
    NVIC->ISER[0] = (1 << (PORT4_IRQn & 0x1F)); // for port 1
    NVIC->ISER[0] = (1 << (PORT3_IRQn & 0x1F)); // for port 3

	// Step 5 - enable globally
	__enable_irq();


}

void main(void)
{

    Keypad_init();
    Init_LCD();

    set_DCO(24.0); // 24Mhz
    set_clk("MCLK");
    set_everything();

    //do your button thing here;
	

	

	signed char key;
	int counter=0;
	int condition;
	while(1){
		condition = (key = read_key()) != 0 || key != -1;
		if (condition && counter == 0){
			P4->OUT = BIT0;
			counter = 1;
			//Write_char_LCD(key);
			delay_us(10000);
		}else if (condition && counter == 1){
			P3->OUT = BIT0;
			counter = 0;
			//Write_char_LCD(key);
			delay_us(10000);
		}
	}


}

